{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022y/iterator/","result":{"data":{"site":{"siteMetadata":{"title":"코딩 주머니"}},"markdownRemark":{"id":"ab2f9efb-8a1e-5eca-bee0-b879cc21f54b","excerpt":"해당 글은 백준 - 키로거문제를 풀며 로 풀면 시간초과가 났었는데 를 사용하여 해결하였었다. (으로도 풀 수 있다)\n이 문제를 계기로 와 를 정리해보려 한다. 참고 링크  Iterator  Enumeration  difference-between-java-enumeration-and…","html":"<p>해당 글은 <a href=\"https://github.com/PowerAlgorithm/Algorithm-Study/blob/main/%5BWeek5%20-%20Data%20Structure%5D/%EC%A0%95%ED%98%84%EC%A4%80/C_5397.java\">백준 - 키로거</a>문제를 풀며 <code class=\"language-text\">LinkedList</code>로 풀면 시간초과가 났었는데 <code class=\"language-text\">ListIterator</code>를 사용하여 해결하였었다. (<code class=\"language-text\">Stack</code>으로도 풀 수 있다)<br>\n이 문제를 계기로 <code class=\"language-text\">Iterator</code>와 <code class=\"language-text\">Enumerator</code>를 정리해보려 한다.<br></p>\n<hr>\n<ul>\n<li>참고 링크\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html\"><code class=\"language-text\">java 8 docs</code> Iterator</a></li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Enumeration.html\"><code class=\"language-text\">java 8 docs</code> Enumeration</a></li>\n<li><a href=\"https://stackoverflow.com/questions/948194/difference-between-java-enumeration-and-iterator\"><code class=\"language-text\">stackoverflow</code> difference-between-java-enumeration-and-iterator</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"iterator-enumerator-iterable-\" style=\"position:relative;\"><strong>Iterator, Enumerator, Iterable</strong> ?<a href=\"#iterator-enumerator-iterable-\" aria-label=\"iterator enumerator iterable  permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p><code class=\"language-text\">Iterator</code>의 공식 문서에 따르면 Collection Framework에서 <code class=\"language-text\">Enumeration</code>을 대체하며 두 가지의 차이점이 있다고 한다.<br></p>\n<ol>\n<li><code class=\"language-text\">Iterator</code>를 사용하면 반복하는 동안 기본 컬렉션에서 요소를 제거할 수 있다.</li>\n<li><code class=\"language-text\">Enumeration</code>의 이름을 개선하였다.</li>\n</ol>\n<br>\n<p><code class=\"language-text\">Enumeration</code>의 공식 문서에는 해당 인터페이스는 <code class=\"language-text\">Iterator</code>와 중복되며, 선택적 제거를 할 수 있고 메서드 이름이 더 짧다<br>\n\"<code class=\"language-text\">Enumeration</code>보다 <code class=\"language-text\">Iterator</code>를 사용하는 것을 고려해라\" 라고 적혀있다.<br></p>\n<br>\n<p><code class=\"language-text\">Iterator</code>는 원소를 삭제하는 메소드도 지원되고 메소드 이름도 짧게 변경되었으니 <code class=\"language-text\">Iterator</code>를 사용해라 라고 이해할 수 있다.<br></p>\n<ul>\n<li>이 글을 작성하게 된 이유인 <code class=\"language-text\">ListIterator</code>인터페이스도 예상하듯이 <code class=\"language-text\">Iterator</code>를 확장하고 있다.</li>\n</ul>\n<br>\n<p>추가로 <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/language/foreach.html\"><code class=\"language-text\">java 8 docs</code> Iterable For-Each Loop</a>를 확인해보자</p>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">public interface Collection&lt;E&gt; extends Iterable&lt;E&gt;\n\n...\n\n// 이 인터페이스를 구현하면 개체가 &quot;for-each 루프&quot; 문의 대상이 될 수 있습니다\npublic interface Iterable&lt;T&gt; {\n    Iterator&lt;T&gt; iterator();\n    ...\n}</code>\n        </deckgo-highlight-code>\n<ul>\n<li>Collection 인터페이스는 <code class=\"language-text\">Iterable</code>을 확장하고 있으며,</li>\n<li><code class=\"language-text\">Iterable</code>은 <code class=\"language-text\">Iterator</code>를 제공한다.</li>\n<li>아래는 <code class=\"language-text\">List</code>의 구현체인 <code class=\"language-text\">ArrayList</code>를 <strong>For-Each</strong>로 작성한 것이다.</li>\n</ul>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">public static void enhancedForLoop() {\n    List&lt;String&gt; test = new ArrayList&lt;&gt;(Arrays.asList(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;));\n    for (String e : test) {\n        if (e.equals(&quot;B&quot;)) {\n            continue;\n        }\n        System.out.println(e);\n    }\n}\n\n...\n\n// 디컴파일\npublic static void enhancedForLoop() {\n    List&lt;String&gt; test = new ArrayList(Arrays.asList(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;));\n    Iterator var1 = test.iterator();\n\n    while(var1.hasNext()) {\n        String e = (String)var1.next();\n        if (!e.equals(&quot;B&quot;)) {\n            System.out.println(e);\n        }\n    }\n\n}</code>\n        </deckgo-highlight-code>\n<p>디컴파일된 부분을 보면 <code class=\"language-text\">ArrayList</code>의 <code class=\"language-text\">Iterator</code>를 생성하여 작성하지도 않은 <code class=\"language-text\">while</code>문으로 반복된다.<br>\n<strong>For-Each Loop</strong>는 각 자료구조에 구현된 <code class=\"language-text\">iterator()</code>를 호출하여 <code class=\"language-text\">Iterator</code>를 사용한다라고 볼 수 있다.<br></p>\n<hr>\n<h1 id=\"concurrentmodificationexception-\" style=\"position:relative;\"><strong>ConcurrentModificationException</strong> ?<a href=\"#concurrentmodificationexception-\" aria-label=\"concurrentmodificationexception  permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>글을 보다보면 <strong>동시성</strong>에 관한 얘기가 나온다.<br></p>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">public static void enhancedForLoop() {\n    List&lt;String&gt; test = new ArrayList&lt;&gt;(Arrays.asList(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;));\n    for (String e : test) {\n        if (e.equals(&quot;B&quot;)) {\n            test.remove(e);\n            continue;\n        }\n        System.out.println(e);\n    }\n}\n\n...\n\n// 디컴파일\npublic static void enhancedForLoop() {\n    List&lt;String&gt; test = new ArrayList(Arrays.asList(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;));\n    Iterator var1 = test.iterator();\n\n    while(var1.hasNext()) {\n        String e = (String)var1.next();\n        if (e.equals(&quot;B&quot;)) {\n            test.remove(e);\n        } else {\n            System.out.println(e);\n        }\n    }\n\n}</code>\n        </deckgo-highlight-code>\n<p>위와 같이 작성하면 <code class=\"language-text\">Exception in thread \"main\" java.util.ConcurrentModificationException</code>예외를 던진다.<br></p>\n<ul>\n<li><code class=\"language-text\">ArrayList</code>의 <code class=\"language-text\">iterator()</code>,<code class=\"language-text\">remove(Object o)</code>를 확인해보자\n<ul>\n<li><code class=\"language-text\">remove()</code>에서 <code class=\"language-text\">fastRemove()</code>를 호출한다.</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">private void fastRemove(int index) {\n    modCount++;\n    int numMoved = size - index - 1;\n    if (numMoved &gt; 0)\n        System.arraycopy(elementData, index+1, elementData, index,\n                            numMoved);\n    elementData[--size] = null; // clear to let GC do its work\n}</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">modCount</code>를 증가시킨다.</li>\n<li><code class=\"language-text\">System.arraycopy</code>를 통해 삭제 인덱스 기준으로 복사한다.</li>\n</ol>\n<br>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\"> public Iterator&lt;E&gt; iterator() {\n        return new Itr();\n}\nprivate class Itr implements Iterator&lt;E&gt; {\n    int cursor;       // index of next element to return\n    int lastRet = -1; // index of last element returned; -1 if no such\n    int expectedModCount = modCount;\n    ...\n\n    public void remove() {\n        if (lastRet &lt; 0)\n            throw new IllegalStateException();\n        checkForComodification();\n\n        try {\n            ArrayList.this.remove(lastRet);\n            cursor = lastRet;\n            lastRet = -1;\n            expectedModCount = modCount;\n        } catch (IndexOutOfBoundsException ex) {\n            throw new ConcurrentModificationException();\n        }\n    }\n\n    final void checkForComodification() {\n        if (modCount != expectedModCount)\n            throw new ConcurrentModificationException();\n    }\n}</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">ArrayList</code>의 inner class인 <code class=\"language-text\">Itr</code>을 생성한다.</li>\n<li><code class=\"language-text\">Itr</code>의 내부 필드인 <code class=\"language-text\">int expectedModCount = modCount;</code>를 확인할 수 있다.</li>\n<li><code class=\"language-text\">remove()</code>에서 <code class=\"language-text\">checkForComodification</code>를 통해 <strong><code class=\"language-text\">Itr</code>을 생성했을 때의 <code class=\"language-text\">expectedModCount</code></strong> 와 <strong><code class=\"language-text\">ArrayList</code>의 <code class=\"language-text\">modCount</code></strong> 는 다르게 되므로 해당 예외를 던지게 된다.</li>\n</ol>\n<br>\n<p>중요한 점은</p>\n<ol>\n<li>위와 같은 방식을 <strong>Fail Fast</strong>라고 한다.</li>\n<li>하지만 <code class=\"language-text\">iterator</code>의 구현체마다 다르다는 것</li>\n</ol>\n<p>코틀린에서는</p>\n<ol>\n<li><code class=\"language-text\">Iterable</code>과 <code class=\"language-text\">Iterator</code>를 구현했을 때</li>\n<li><code class=\"language-text\">Iterable</code>과 <code class=\"language-text\">Iterator</code>를 구현하지 않고 <code class=\"language-text\">operator</code>만 작성했을 때</li>\n</ol>\n<p>이 두 가지를 테스트해보았다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">class IterableTest: BehaviorSpec ({\n\n    val size = 5\n    val sum = 15\n\n    given(&quot;Iterable과 Iterator를 implement한 클래스는&quot;) {\n        class ImplementIterable(private val size: Int): Iterable&lt;Int&gt; {\n            override fun iterator(): Iterator&lt;Int&gt; = ImplementIterator(size)\n\n            inner class ImplementIterator(private val size: Int) : Iterator&lt;Int&gt; {\n                var number: Int = 0\n                override fun hasNext(): Boolean = number++ &lt; size\n                override fun next(): Int = number\n            }\n        }\n\n\n        `when`(&quot;Iterable,Iterator 둘 다 for 문을 사용할 수 있다.&quot;) {\n\n            then(&quot;for .. in&quot;) {\n                val iterable = ImplementIterable(size)\n                val iterator = iterable.iterator()\n\n                var test = 0\n                for (i in iterable) { test += i }\n\n                /**\n                 * iterable을 통해 for문을 실행하면 내부 iterator의 number 상태가 변경되어있을 줄 알았지만, 0 그대로다.\n                 * iterable의 for문을 사용해도 내부 iterator는 일회용으로 사용되는 것 같다.\n                 */\n                test shouldBeEqual sum\n                iterable.iterator().next() shouldBeEqual 0\n\n                var test2 = 0\n                for (i in iterator) { test2 += i }\n                test2 shouldBeEqual sum\n\n                test shouldBeEqual test2\n            }\n\n            then(&quot;forEach 블록&quot;) {\n                val iterable = ImplementIterable(size)\n                val iterator = iterable.iterator()\n\n                var test = 0\n                iterable.forEach { test += it }\n                test shouldBeEqual sum\n\n                var test2 = 0\n                iterator.forEach { test2 += it }\n                test2 shouldBeEqual sum\n            }\n\n            then(&quot;Iterable만 sum()이 존재한다.&quot;) {\n                val iterable = ImplementIterable(size)\n\n                iterable.sum() shouldBeEqual sum\n            }\n        }\n    }\n\n    given(&quot;Iterable과 Iterator를 implement하지않고 operator만 작성한 클래스는&quot;) {\n        class JustIterable(private val size: Int) {\n            operator fun iterator(): JustIterator = JustIterator(size)\n\n            inner class JustIterator(private val size: Int) {\n                private var number: Int = 0\n                operator fun hasNext(): Boolean = number++ &lt; size\n                operator fun next(): Int = number\n            }\n        }\n\n        `when`(&quot;Iterable만 for 문을 사용할 수 있다.&quot;) {\n            val iterable = JustIterable(size)\n            val iterator = iterable.iterator()\n\n            then(&quot;for .. in&quot;) {\n                var test = 0\n                for (i in iterable) { test += i }\n                test shouldBeEqual sum\n            }\n\n            then(&quot;컴파일 에러&quot;) {\n//                for (i in iterator) { }\n//                iterable.forEach { test += it }\n//                iterator.forEach { test += it }\n//                iterable.sum()\n//                iterator.sum()\n            }\n        }\n    }\n})</code>\n        </deckgo-highlight-code>","frontmatter":{"title":"Iterator?Enumerator?Iterable?","date":"November 15, 2022","description":null,"tags":["Java","Lab"]},"tableOfContents":"<ul>\n<li><a href=\"#iterator-enumerator-iterable-\"><strong>Iterator, Enumerator, Iterable</strong> ?</a></li>\n<li><a href=\"#concurrentmodificationexception-\"><strong>ConcurrentModificationException</strong> ?</a></li>\n</ul>"},"previous":{"fields":{"slug":"/2022y/lombok/"},"frontmatter":{"title":"롬복 생성자 어노테이션 써도 될까?"}},"next":{"fields":{"slug":"/2022y/trainingProject/"},"frontmatter":{"title":"1차 트레이닝 프로젝트"}}},"pageContext":{"id":"ab2f9efb-8a1e-5eca-bee0-b879cc21f54b","previousPostId":"84f756f9-0536-5936-a0a1-34e0d515dd42","nextPostId":"3b68603f-73f2-5431-aa51-73cc7a6b8543"}},"staticQueryHashes":["230163734","3589320610"],"slicesMap":{}}